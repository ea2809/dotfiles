"{{{ Virtualenv
let g:python_host_prog=$HOME.'/venvs/nvim/bin/python'
let g:python3_host_prog=$HOME.'/venvs/nvim3/bin/python'
" }}}

" Pre plug preferences {{{
let g:rooter_patterns = ['behave.ini', 'behave.ini', 'venv', '.in', '.git', '.git/', '_darcs/', '.hg/', '.bzr/', '.svn/' , ]
" }}}

" Install plugins using vim-plug {{{
let plugfile = $HOME . '/dotfiles/vim/plug.vim'
if filereadable(plugfile)
	exec 'source' plugfile
endif
" }}}

" Better move in text{{{
" Most of the ideas from https://github.com/caarlos0/dotfiles/blob/master/vim/vimrc.symlink

map <Up> gk
map <Down> gj
map k gk
map j gj

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Move lines on visual mode
vnoremap <Down> :m '>+1<CR>gv=gv
vnoremap <Up> :m '<-2<CR>gv=gv
" }}}

" Base configuration {{{
set nocompatible

set clipboard=unnamed " Set clipboard

let maplocalleader = " "
let mapleader = " "

" enable syntax and plugins (for netrw)
syntax enable
filetype off
filetype plugin on

" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**

" Display all matching files when we tab complete
set wildmenu
set wildignore+=*/.git/*

set backspace=indent,eol,start

" Display problematic whitespace
" set listchars=tab:▸▹,trail:•,extends:#,precedes:#,nbsp:⌻
" set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:␣
set listchars=eol:¬,tab:»\ ,trail:~,extends:>,precedes:<,space:·
set list

" Toggle hlsearch
nnoremap <Leader>t :nohls<CR>

" Show other match
set showmatch

" Display linebreaks and tabs
set linebreak
set showbreak=↪\ 
set breakindent
set tabstop=2
set showtabline=2
set softtabstop=2 " Width of a soft tab stop when using spaces
set shiftwidth=2  " Indent width

set cursorline

set visualbell " No sound

" Set up undo configuration
let vimDir = '$HOME/.vim'
if has('persistent_undo')
	" Set persistent undo
	let myUndoDir = expand(vimDir . '/undodir')
	set undofile
	set undodir=~/.vim/undo
	" Create dirs
	call system('mkdir -p ' . myUndoDir)
endif

" Set levels for history an undo
set history=1000
set undolevels=1000

" Activar las búsquedas
set hlsearch
set ignorecase
set smartcase

" Print when needed
" set lazyredraw 

set complete=.,w,b,u,t
set completeopt=longest,menuone

set smarttab

" Disable mode show
set noshowmode

" Show always the status
set laststatus=2

set number relativenumber

set termguicolors

set ttimeoutlen=50

set spelllang=es

" Auto reload files
set autoread

" Setup style
set background=dark
set t_Co=256  
let g:PaperColor_Theme_Options = {
			\   'theme': {
			\     'default': {
			\       'transparent_background': 1,
			\       'allow_bold': 1,
			\       'allow_italic': 1
			\     }
			\   }
			\ }
colorscheme PaperColor

nnoremap <Leader>fm :Vifm . <Enter>
nnoremap <Leader>ff :Vifm "expand('%:r')"<Enter>

" Netrw look like nerdtree
let g:netrw_banner = 0
" let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 20
let g:netrw_list_hide= '.*\.swp$,.*\.pyc'
let g:netrw_hide = 1
let g:netrw_fastbrowse = 0

" Views do not save options
" https://stackoverflow.com/questions/44065404/vim-does-not-reload-set-option-config-in-vimrc/44066065#44066065
set viewoptions-=options

" Save globals variables to save vim-workspace variable
set sessionoptions+=globals

" Reload when something happens
autocmd FocusGained * silent! checktime

" Search for the selected text
vnoremap // y/\V<C-r>=escape(@",'/\')<CR><CR>

" Activate vim-which-key
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
vnoremap <silent> <leader> :WhichKeyVisual '<Space>'<CR>

" }}}

"Split navigations {{{
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" }}}

" Save with control+s and <leader>fs {{{
nmap <C-s> :w<CR>
nmap <leader>w :w<CR>
nmap <leader>ww :w<CR>
imap jk <ESC>
" imap <C-s> <Esc>:w<CR>
nmap <leader>fs :w<CR>
" imap <leader>fs <Esc>:w<CR>
" }}}

" Buffers mappings {{{
nnoremap <leader>bn :bn<CR>
inoremap <leader>bn <Esc>:bn<CR>

nnoremap <leader>bt :b#<CR>
inoremap <leader>bt <Esc>:b#<CR>
nnoremap <leader><tab> :b#<CR>
inoremap <leader><tab> <Esc>:b#<CR>

noremap <Right> :bn<CR>
noremap <Left> :bp<CR>

nnoremap <leader>bb :ls<CR>
inoremap <leader>bb <Esc>:ls<CR>

nnoremap <leader>bp :bp<CR>
inoremap <leader>bp <Esc>:bp<CR>

nnoremap <leader>dd :bd<CR>
nnoremap <leader>bd :bd<CR>
inoremap <leader>bd <Esc>:bd<CR>

nnoremap <leader>q :q<CR>
nnoremap <leader>qq :q<CR>
nnoremap <leader>wq :wq<CR>

nnoremap <leader>Q :q!<CR>

" better space identation
let g:indent_guides_enable_on_vim_startup = 1
let g:indentLine_leadingSpaceChar = " "
let g:indentLine_leadingSpaceEnabled = 1
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
" }}}

" Prose mode found on the net {{{
function! ProseMode()
	call goyo#execute(0, [])
	set spell noci nosi noai nolist noshowmode noshowcmd
	set complete+=s
	"set bg=light
	"if !has('gui_running')
	"let g:solarized_termcolors=256
	"endif
	"colors solarized
endfunction

command! ProseMode call ProseMode()
nmap <leader>p :ProseMode<CR>
" }}}

" Deople and UltiSnips config {{{
if has("nvim")
	" Enable deoplete at startup
	let g:deoplete#enable_at_startup = 1
	" let g:deoplete#omni_patterns = {}
	" let g:deoplete#omni_patterns.java = '[^. *\t]\.\w*'
	" let g:deoplete#sources = {}
	" let g:deoplete#sources._ = []
	" let g:deoplete#file#enable_buffer_path = 1	" Close preview window
	" autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
	" " Configure deoplete so that it uses tabs
	" let g:SuperTabDefaultCompletionType = "<C-n>"
	inoremap <expr><tab> pumvisible() ? "\<C-n>" : "\<tab>"
	let g:UltiSnipsExpandTrigger="<leader><tab>"
	let g:UltiSnipsJumpForwardTrigger="<leader>ss"
	let g:UltiSnipsJumpBackwardTrigger="<leader>sk"
	inoremap <silent><expr> <leader><tab>
				\ pumvisible() ? coc#_select_confirm() :
				\ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
				\ <SID>check_back_space() ? "\<tab>" :
				\ coc#refresh()

	function! s:check_back_space() abort
		let col = col('.') - 1
		return !col || getline('.')[col - 1]  =~# '\s'
	endfunction

	let g:coc_snippet_next = '<leader><tab>'
	" UtilSnips
	nnoremap <leader>ss :call UltiSnips#JumpForwards()<CR>
	nnoremap <leader>sk :call UltiSnips#JumpBackwards()<CR>

endif
" }}}

" Vim airline configuration {{{
let g:airline_powerline_fonts = 1
let g:airline_right_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_left_alt_sep= ''
let g:airline_left_sep = ''
let g:airline#extensions#tabline#enabled = 1

if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif

let g:airline_symbols.branch = ''
" }}}

" Quickfix window {{{
map <leader>ee :cnext<CR>
map <leader>ek :cprevious<CR>
nnoremap <leader>ec :cclose<CR>
nnoremap <leader>cc :cc<CR>
" }}}

" Go Configuration {{{
let g:go_fmt_command = "goimports"
let g:go_list_type = "quickfix" " Everything in quickfix windows
let g:go_auto_type_info = 1
let g:go_auto_sameids = 1

autocmd FileType go nmap <leader>b  <Plug>(go-build)
autocmd FileType go nmap <leader>r  <Plug>(go-run)
autocmd FileType go nmap <leader>tt  <Plug>(go-test)
autocmd FileType go nmap <leader>tf  <Plug>(go-test-func)
autocmd FileType go nmap <leader>gt  <Plug>(go-def)
autocmd FileType go nmap <leader>gk  <Plug>(go-def-pop)
autocmd FileType go nmap <leader>gs  <Plug>(go-def-stack)
autocmd FileType go nmap <leader>gc  <Plug>(go-def-stack-clear)
autocmd FileType go nmap <leader>de  :GoDecls<CR>
autocmd FileType go nmap <leader>do  :GoDoc<CR>
autocmd FileType go nmap <Leader>i  <Plug>(go-info)
" autocmd FileType go nmap <leader>ct  <Plug>(go-coverage-toggle)
" autocmd FileType go nmap <leader>cc  <Plug>(go-coverage-clear)
" autocmd FileType go nmap <leader>c  <Plug>(go-coverage)
" autocmd FileType go nmap <leader>cb  <Plug>(go-coverage-browser)
" }}}

" Vim files {{{
au FileType vim setlocal foldmethod=marker
" }}}

" Java {{{
let g:gitdir=system("git rev-parse --show-toplevel")
let isnotgitdir=matchstr(gitdir, '^fatal:.*')
if empty(isnotgitdir)
	" \ 'java': [$HOME.'/dotfiles/bin/jdtls', g:gitdir.'src/main/java/'],
	" \ 'java': ['tcp://127.0.0.1: 1044'],
	let g:LanguageClient_serverCommands = {
				\ 'java': [$HOME.'/dotfiles/bin/jdtls', g:gitdir.'src/main/java/'],
				\ }
else
	let g:LanguageClient_serverCommands = {
				\ 'java': [$HOME.'/dotfiles/bin/jdtls'],
				\ }
endif

let g:JavaComplete_AutoStartServer = 0
let g:JavaComplete_CheckServerVersionAtStartup = 0
let g:JavaComplete_IgnoreErrorMsg = 1

let g:neoformat_java_google = {
			\ 'exe': '/usr/local/bin/java-formatter',
			\ 'args': ["-"],
			\ 'stdin': 1, 
			\ }

let g:neoformat_enabled_java = ['google']


autocmd! BufWritePost,BufEnter *.java Neomake  " Linting
autocmd FileType java setlocal tabstop=2 shiftwidth=2 expandtab

autocmd FileType java nmap <leader>gt <Plug>(coc-definition)
autocmd FileType java nmap K :call CocAction('doHover')<CR>
autocmd CursorHold *.java silent call CocActionAsync('highlight')
" }}}

" Scala {{{
au BufRead,BufNewFile *.sbt set filetype=scala
autocmd FileType scala nmap <leader>gt <Plug>(coc-definition)
autocmd FileType scala nmap K :call CocAction('doHover')<CR>
autocmd CursorHold *.scala silent call CocActionAsync('highlight')
" }}}

" Gui Setting {{{
if has('gui_macvim')
	set guifont=FuraCode\ Nerd\ Font:h13
	set linespace=2
	set macligatures
endif

" }}}

" Latex settings{{{
autocmd FileType tex nnoremap <leader>r :! pdflatex %<CR>
" }}}

" Basic mappings {{{
nnoremap <leader>o :! open . <CR><CR>
" }}}

" CTRLP (FZF){{{

if executable('fzf')
	let g:ctrlp_map = '<m-p>'
	noremap <silent> <C-p> :Files<CR>
endif

""let g:ctrlp_mruf_relative = 1
"if executable('fd')
"	let g:ctrlp_user_command = 'fd --type f --color never "" %s'
"	let g:ctrlp_use_caching = 0
"elseif executable('rg')
"	let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
"	let g:ctrlp_use_caching = 0
"elseif executable('ag')
"	let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
"				\ --ignore .git
"				\ --ignore .svn
"				\ --ignore .hg
"				\ --ignore .DS_Store
"				\ --ignore "**/*.pyc"
"				\ --ignore "*.class"
"				\ -g ""'
"	let g:ctrlp_use_caching = 0
"else
"	let g:ctrlp_clear_cache_on_exit = 0
"endif
" }}}

" YAML{{{
au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml foldmethod=indent
autocmd FileType yaml setlocal tabstop=2 shiftwidth=2 expandtab

let g:neoformat_enabled_yaml = ['prettier']
" }}}

" JSX{{{
autocmd FileType javascript.jsx setlocal tabstop=2 shiftwidth=2 expandtab
" }}}

" JSON{{{
au! BufNewFile,BufReadPost *.json set filetype=json foldmethod=syntax
autocmd FileType json setlocal tabstop=2 shiftwidth=2 expandtab
" }}}

" Python{{{
"Copy from github: https://gist.github.com/eduardocereto/3088543
au FileType python setlocal expandtab shiftwidth=4 tabstop=4 smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class,with
au BufRead *.py set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m
autocmd FileType python setlocal foldmethod=indent foldlevel=99
autocmd FileType python setlocal commentstring=#\ %s
let g:jedi#show_call_signatures = 2
let g:jedi#auto_vim_configuration = 0
" let g:neoformat_enabled_python = ['autopep8', 'yapf', 'isort']
let g:neoformat_enabled_python = ['autopep8', 'yapf']
autocmd FileType python let g:neoformat_run_all_formatters = 1

autocmd FileType python nmap <leader>gt <Plug>(coc-definition)

autocmd CursorHold *.py silent call CocActionAsync('highlight')
" }}}

" Cucumber {{{
" Thankts tpope for you awesome plugin: https://github.com/tpope/vim-cucumber
autocmd BufNewFile,BufReadPost *.feature set filetype=gherkin
au! Syntax gherkin source ~/dotfiles/vim/cucumber.vim
autocmd FileType gherkin setlocal commentstring=#\ %s
autocmd FileType cucumber setlocal commentstring=#\ %s
autocmd FileType feature setlocal commentstring=#\ %s
autocmd FileType gherkin vnoremap <leader>= :EasyAlign*<Bar><Enter>
autocmd FileType gherkin nnoremap <leader>= V}k<leader>=
autocmd FileType gherkin setlocal tabstop=2 shiftwidth=2 expandtab
" }}}

" CFG (.cfg) {{{
autocmd FileType cfg setlocal commentstring=#\ %s
" }}}

" Neoformat {{{
let g:neoformat_only_msg_on_error = 1
augroup fmt
	autocmd!
	autocmd BufWritePre * undojoin | Neoformat
augroup END
" }}}

" Configure .env file {{{
autocmd BufNewFile,BufReadPost .env set filetype=sh
" }}}

" EasyAlign {{{
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
" }}}

" vim-workspace{{{
let g:workspace_session_directory = $HOME . '/.vim/sessions/'
nnoremap <leader>wt :ToggleWorkspace<CR>
let g:workspace_autosave = 0
let g:workspace_persist_undo_history = 0
let g:workspace_session_disable_on_args = 1
let g:workspace_autosave_ignore = ['gitcommit', 'help']
"}}}

" Rg (ripgrep) and Ag (Silver Searcher) {{{
if executable('rg')
	set grepprg=rg\ --vimgrep\ --no-heading
	command -nargs=+ -complete=file -bar Rgg silent! grep! <args>|cwindow|redraw!
	set grepformat=%f:%l:%c:%m,%f:%l:%m
	nnoremap <Leader>ag :Rg<Space> 
endif

if executable('ag')
	" Use ag over grep
	set grepprg=ag\ --nogroup\ --nocolor
	command -nargs=+ -complete=file -bar Agg silent! grep! <args>|cwindow|redraw!
	nnoremap <Leader>ag :Ag<Space>
endif
" }}}

" Coc config{{{
nnoremap <Leader>ca :CocAction<CR>
" noremap <Leader>ca <Plug>(coc-codeaction)
nnoremap <Leader>cf :CocFix<CR>
nmap <leader>qf  <Plug>(coc-fix-current)

" Code navigation
nmap <leader>gd <Plug>(coc-definition)
nmap <Leader>gy <Plug>(coc-type-definition)
nmap <Leader>gi <Plug>(coc-implementation)
nmap <Leader>gr <Plug>(coc-references)

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)
nmap <leader>rr <Plug>(coc-refactor)

" Show all diagnostics.
nnoremap <silent> <leader>cd  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <leader>ce  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <leader>cm :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <leader>co  :<C-u>CocList outline<cr>
" Search workleader symbols.
nnoremap <silent> <leader>cs  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <leader>cj  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <leader>ck  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <leader>cp  :<C-u>CocListResume<CR>


" }}}

" Markdown {{{
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
" }}}

" Netrw {{{
" Quit netrw when selecting a file
" function! QuitNetrw()
"   for i in range(1, bufnr("$"))
"     if buflisted(i)
"       if getbufvar(i, '&filetype') == "netrw"
"         exe 'bwipeout ' . i
"       endif
"     endif
"   endfor
" endfunction

" autocmd VimLeavePre *  call QuitNetrw()
" }}}

" Devicons config {{{
let g:WebDevIconsTabAirLineAfterGlyphPadding = ' '
let g:WebDevIconsTabAirLineBeforeGlyphPadding = ''
" }}}

" Behave Gherkin config {{{
let g:behave_path = "test"
autocmd FileType gherkin nmap <leader>gt  :call behave#goto_step_definition()<CR>
" }}}

" Git configurtion{{{
nnoremap <Leader>gst :Gstatus<CR>
nnoremap <Leader>gp :Gpush<CR>
nnoremap <Leader>gb :Gblame<CR>
" }}}

" Abbrevations{{{
iabbrev pdbd import sys, pdb; pdb.Pdb(stdout=sys.__stdout__).set_trace()
" }}}

" Terminal config {{{
augroup TerminalStuff
	" Fix problem when you run a fullscreen command (vifm,top,...)
	autocmd!
	autocmd TermOpen * set sidescrolloff=0
	autocmd TermClose * set sidescrolloff=15 " Copy value from the Scrolling section
augroup END
" }}}

" Scrolling {{{
" Note: is sidescrolloff is modifies should be modified in the Terminal Config
" section
set scrolljump=5      " Lines to scroll when cursor leaves screen
set scrolloff=8       " Minimum lines to keep above and below cursor
set sidescrolloff=15  " Minimum columns to keep left and right of cursor
set sidescroll=1      " Number of columns to scroll horizontally
" }}}

" Syntax {{{

" JAVA
highlight link JavaIdentifier NONE
highlight link JavaOperator NONE

highlight link JavaFunction javaClassDecl
" highlight link JavaFunctionCall javaTypedef
highlight link JavaFunctionCall NONE
highlight link javaInclude pythonImport
highlight link javaOverride semshiGlobal
highlight link javaPackage semshiGlobal
highlight link javaSpecialTags semshiGlobal
highlight link javaPreProc pythonDecorator
highlight link javaTypedef LineNr
highlight link javaTypeIn Function
highlight link javaTypeSystem Type
highlight link javaOperatorSystem Type
highlight link javaOperatorSpecial Type


" Cucumber
hi! def link cucumberGiven     Include

nmap <leader>sy :call <SID>SynStack()<cr>

function! s:SynStack()
    if exists("*synstack")
        for id in synstack(line("."), col("."))
            echon " ".synIDattr(id, "name")
            exe "echoh ".synIDattr(id, "name")
            echon "[".synIDattr(synIDtrans(id), "name")."]"
            echoh None
        endfor
    endif
endfunc 
"}}}

" cwjk"rpb"ryiwn@a
