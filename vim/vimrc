set nocompatible

set clipboard=unnamed

let maplocalleader = ","
let mapleader = ","

" enable syntax and plugins (for netrw)
syntax enable
filetype plugin on

" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**

" Display all matching files when we tab complete
set wildmenu
set wildignore+=*/.git/*


set backspace=indent,eol,start

" Display problematic whitespace
" set listchars=tab:▸▹,trail:•,extends:#,precedes:#,nbsp:⌻
:set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:␣
set list

" Toggle hlsearch show
" :nnoremap <silent> <Leader>h :nohlsearch<Bar>:echo<CR>
nnoremap <Leader>t :set hlsearch! hlsearch?<CR>

" Show other match
set showmatch

" Display linebreaks and tabs
set linebreak
set showbreak=━━
set breakindent
set tabstop=2
set showtabline=2

set cursorline


" Set up undo configuration
let vimDir = '$HOME/.vim'
if has('persistent_undo')
		" Set persistent undo
		let myUndoDir = expand(vimDir . '/undodir')
		set undofile
		set undodir=~/.vim/undo
		" Create dirs
		call system('mkdir -p ' . myUndoDir)
endif

" Set levels for history an undo
set history=1000
set undolevels=1000

" Activar las búsquedas
set hlsearch

" Disable mode show
set noshowmode

" Show always the status
set laststatus=2

call plug#begin('~/.vim/plugged')

Plug 'fatih/vim-go'
Plug 'itchyny/lightline.vim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'junegunn/goyo.vim'
Plug 'airblade/vim-gitgutter'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'gioele/vim-autoswap'
Plug 'davidhalter/jedi-vim', {'for': 'python'}

if has("nvim")
		Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
		Plug 'zchee/deoplete-jedi', {'for': 'python'}
else
		Plug 'Valloric/YouCompleteMe'
endif

call plug#end()

set background=dark

set number relativenumber

set termguicolors

colorscheme PaperColor

set ttimeoutlen=50

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Save with control+s
nmap <C-s> :w<CR>
imap <C-s> <Esc>:w<CR>

" Mapping go to function
nnoremap <leader>jd :YcmCompleter GoTo<CR>

" Modo prosa
function! ProseMode()
  call goyo#execute(0, [])
  set spell noci nosi noai nolist noshowmode noshowcmd
  set complete+=s
  "set bg=light
  "if !has('gui_running')
    "let g:solarized_termcolors=256
  "endif
  "colors solarized
endfunction

command! ProseMode call ProseMode()
nmap <leader>p :ProseMode<CR>


" Deople config
if has("nvim")
		let g:deoplete#enable_at_startup = 1

		" Configure deoplete so that it uses tabs
		let g:SuperTabDefaultCompletionType = "<C-n>"
		inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
endif

" Lightline configuration

let g:lightline = {
      \ 'colorscheme': 'powerline',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head'
      \ },
      \ }
